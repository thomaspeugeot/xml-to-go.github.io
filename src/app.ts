// wasm_exec.js is a JavaScript file provided by the Go programming language team, 
// designed to facilitate the execution of WebAssembly (Wasm) modules generated by Go programs in a web environment. 
// When you compile a Go program to WebAssembly using GOARCH=wasm GOOS=js go build -o output.wasm, 
// the Go compiler outputs a .wasm file that needs a runtime environment to function correctly.
// wasm_exec.js provides that environment by acting as a JavaScript "glue" 
// code between the Go Wasm binary and the JavaScript host environment (like a web browser).
import "./wasm/wasm_exec"

// highlighting function
import highlight from "./highlight";

// a js class for supporting options
import { Options } from "./convert";

// js get all its 
const $input = document.getElementById("input");
const $output = document.getElementById("output");
const $sample = document.getElementById("sample");
const $inline = document.getElementById("inline") as HTMLInputElement;
const $withJSON = document.getElementById("with-json-tags") as HTMLInputElement;
const $compact = document.getElementById("compact") as HTMLInputElement;

const options = new Options($inline.checked, $withJSON.checked, $compact.checked);

// The doConversion function is designed to perform a conversion operation using a WebAssembly function (xmlDataToGoTypeCode)
// and then display the result in a specified output element. 
function doConversion() {
    console.log("doConversion")
    // This line calls the xmlDataToGoTypeCode function, which is presumably exposed 
    // to the global JavaScript context (via WebAssembly or another integration).
    const result = globalThis.xmlDataToGoTypeCode(
        $input.innerText.trim(),
        options.inline,
        options.compact,
        options.withJSON);

    if (result !== "") {
        $output.innerHTML = highlight(result);
    } else {
        $output.innerHTML = "";
    }
}
// The function xmlToGoWasmURL is a JavaScript function that determines the URL from which to 
// fetch the WebAssembly (Wasm) module depending on the environment in which the code is running. 
function xmlToGoWasmURL() {
    console.log("xmlToGoWasmURL, location.pathname", location.pathname)
    if (location.pathname.startsWith("/Users/")) {
        console.log("local")
        return "http://localhost:8080/xml-to-go.wasm?v1";
    }

    console.log("remote")
    return "https://xml-to-go.github.io/static/js/wasm/xml-to-go.wasm?v1";
}

//
// follow are all maners to call doConversion
//
$input.addEventListener("keyup", doConversion);

$inline.addEventListener("change", function () {
    options.inline = $inline.checked;

    doConversion();
});

$withJSON.addEventListener("change", function () {
    options.withJSON = $withJSON.checked;

    doConversion();
});

$compact.addEventListener("change", function () {
    options.compact = $compact.checked;

    doConversion();
});

$sample.addEventListener("click", function () {
    $input.innerText = sample;

    doConversion();
});

// https://www.w3schools.com/xml/xml_examples.asp
// language=XML
const sample = `<note>
    <to>Tove</to>
    <from>Jani</from>
    <heading>Reminder</heading>
    <body>Don't forget me this weekend!</body>
</note>`;

// Go from ./wasm/wasm_exec

// This line creates a new instance of the Go class, which is defined in wasm_exec.js.
//
// The Go object is responsible for setting up the necessary imports and 
// managing the interaction between the WebAssembly module and the JavaScript environment. 
// It includes the Go runtime, which handles memory allocation, garbage collection, goroutines, and more.
//
const go = new globalThis.Go();

// namespace
WebAssembly
    // instantiateStreaming is a method that compiles and instantiates a WebAssembly 
    // module directly from a streaming 
    // fetch response. This is efficient because it allows the WebAssembly 
    // module to start compiling while itâ€™s still being downloaded.
    .instantiateStreaming(

        // fetch(xmlToGoWasmURL()) initiates a fetch request to get the WebAssembly binary file.
        // The function xmlToGoWasmURL() 
        // is presumably a function that returns the URL of the WebAssembly module generated from Go.
        fetch(
            xmlToGoWasmURL()
        ),
        // go.importObject provides the necessary imports required by the WebAssembly module. 
        // This object is provided by the Go runtime and includes essential functions 
        // and data structures that the WebAssembly module needs to function correctly.
        go.importObject
    )
    // Once the WebAssembly module is successfully fetched, compiled, and instantiated, 
    // the .then() method runs the provided callback function.
    // result.instance refers to the instantiated WebAssembly module.
    // go.run(result.instance) initializes and runs the WebAssembly module using the Go runtime, 
    // which is responsible for executing the Go code compiled into WebAssembly. 
    // This sets up the module and starts its main function.
    .then(function (result) {
        go.run(result.instance);
    });
